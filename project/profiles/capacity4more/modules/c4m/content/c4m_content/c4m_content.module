<?php

/**
 * @file
 * Code for the Article content type feature.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a cancel button to all node forms.
 */
function c4m_content_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Check if a cancel button should be added to node forms.
  $cancel = variable_get('c4m_content_cancel_button', FALSE);
  if (!$cancel) {
    return;
  }

  // Use destination parameter when set.
  $params = drupal_get_query_parameters();
  if (empty($params['destination'])) {
    // Use javascript history.go(-1) when destination is not set.
    $form['actions']['cancel'] = array(
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#attributes' => array('onClick' => 'history.go(-1); return true;'),
      '#weight' => 14,
    );
  }
  else {
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#submit' => array('c4m_content_cancel_button_callback'),
      '#limit_validation_errors' => array(),
      '#weight' => 14,
    );
  }
}

/**
 * Cancel button callback when a destination parameter was set.
 */
function c4m_content_cancel_button_callback($form, &$form_state) {
  drupal_goto();
}

/**
 * Implements hook_block_info().
 */
function c4m_content_block_info() {
  $blocks['global_statistics_summary'] = array(
    'info' => t('Global website statistics'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'global_statistics_summary':
      $stats_summary = array(
        '#theme' => 'c4m_website_statistics_summary',
        '#data' => c4m_content_get_global_statistics(),
      );
      $block['content'] = render($stats_summary);
      break;
  }
  return $block;
}

/**
 * Load all statistics info from implemented hook_c4m_content_statistics_info.
 *
 * @param string $context
 *   The context to load the info for.
 *   Supported contexts:
 *   - global.
 *   - group.
 *   - topic.
 *
 * @return array
 *   Configuration as collected through the implemented
 *   hook_c4m_content_statistics_info hooks.
 */
function c4m_content_statistics_info($context) {
  $cache_key = 'c4m_content:statistics_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $data = module_invoke_all('c4m_content_statistics_info');

      // Sort the contexts.
      foreach ($data as $key => $info) {
        uasort($info, 'drupal_sort_weight');
        $data[$key] = $info;
      }

      // Save in cache.
      cache_set($cache_key, $data);
    }
  }

  return (isset($data[$context]))
    ? $data[$context]
    : array();
}

/**
 * Get the global statistics.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_global_statistics() {
  $list = c4m_content_statistics_info('global');
  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Get the topic statistics.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_topic_statistics() {
  $list = c4m_content_statistics_info('topic');

  $node = menu_get_object('node');

  if (!$node || $node->type != 'topic') {
    return array();
  }

  $topic_wrapper = entity_metadata_wrapper('node', $node);
  $topic_term = $topic_wrapper->c4m_vocab_topic_mapping->value();

  foreach ($list as $key => &$info) {
    $info['topic'] = $topic_term->tid;
  }

  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Get the statistics specific for the current group.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_current_group_statistics() {
  $og_context = og_context();
  return c4m_content_get_group_statistics($og_context);
}

/**
 * Get the statistics specific for the given group.
 *
 * @param object $og_context
 *   The group to gather the statistics for.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_group_statistics($og_context = NULL) {
  if (!$og_context) {
    return array();
  }

  $list = c4m_content_statistics_info('group');

  // Filter the list & limit to only content types that are enabled for the
  // given group.
  foreach ($list as $key => &$info) {

    if ($info['entity_type'] === 'node'
      && !c4m_og_feature_is_content_type_enabled($info['type'])
    ) {
      unset($list[$key]);
      continue;
    }

    // Add the current og_id to the info.
    $info['og_id'] = $og_context['gid'];
  }

  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Helper to collect the statistics data based on the given list.
 *
 * @param array $list
 *   Statistics configuration list retrieved from c4m_content_statistics_info().
 *
 * @return array
 *   The collected data.
 */
function _c4m_content_statistics_collect_data(array $list) {
  $data = array();

  foreach ($list as $key => $info) {
    $type = isset($info['aggregate']['type'])
      ? $info['aggregate']['type']
      : $info['type'];

    $og_id = isset($info['og_id'])
      ? $info['og_id']
      : NULL;

    $topic = isset($info['topic'])
      ? $info['topic']
      : NULL;

    $status = isset($info['c4m_status'])
      ? $info['c4m_status']
      : NULL;

    $arguments = array(
      'entity_type' => $info['entity_type'],
      'bundles' => $info['bundles'],
      'state' => $info['state'],
      'og_id' => $og_id,
      'topic' => $topic,
      'c4m_status' => $status,
    );
    $count = c4m_helper_entity_get_number_of_entities($arguments);

    $link = isset($info['link'])
      ? $info['link']
      : FALSE;

    if (isset($link['options']['query']) && $topic) {
      $link['options']['query']['f'] = str_replace(
        '@TOPIC_ID',
        $topic,
        $link['options']['query']['f']
      );
    }

    if (!isset($data[$type])) {
      $data[$type] = array(
        'title' => array(
          'singular' => $info['singular'],
          'plural' => $info['plural'],
        ),
        'count' => 0,
        'attributes' => $info['attributes'],
        'link' => $link,
      );
    }

    $data[$type]['count'] += $count;
  }

  return $data;
}

/**
 * Implements hook_theme().
 */
function c4m_content_theme() {
  $theme['c4m_website_statistics_summary'] = array(
    'variables' => array(
      'data' => array(),
    ),
    'file' => 'c4m_content.theme.inc',
    'path' => drupal_get_path('module', 'c4m_content') . '/includes',
  );

  $theme['c4m_taxonomy_tree'] = array(
    'template' => 'c4m_taxonomy_tree',
    'path' => drupal_get_path('module', 'c4m_content') . '/templates',
    'variables' => array(),
  );

  return $theme;
}

/**
 * Helper to determine the current context.
 *
 * @return string
 *    Returns one of the following contexts:
 *    - group: we are in a group
 *    - global: we are outside a group
 */
function c4m_content_current_context() {
  $gid = c4m_og_current_group_id();
  if ($gid) {
    return 'group';
  }
  else {
    return 'global';
  }
}

/**
 * Build a tree of a hierarchical taxonomy and theme it.
 *
 * @param array $items
 *   The items in the tree.
 * @param array $link_term_to_facet
 *   The current vocabulary machine name, for linking to facet.
 *
 * @return string
 *   The markup of the tree.
 */
function c4m_content_taxonomy_build_tree($items, $link_term_to_facet = array()) {
  $options = array(
    'absolute' => TRUE,
    'purl' => array('disabled' => TRUE),
  );
  $tree = '';

  // Loop through all the taxonomy items and add them to the tree.
  foreach ($items as $item) {
    $local_tree = array();

    // Get the items taxonomy tree (include the item itself).
    $taxonomy_tree = taxonomy_get_parents_all($item['tid']);

    // For every item, build his parents tree, if he has any.
    foreach ($taxonomy_tree as $index => $taxonomy) {

      // If the link term was not provided, or he isn't the proper one for the current vocabulary,
      // create a default link to the taxonomy term.
      if (empty($link_term_to_facet['vocabulary_name']) || $taxonomy->vocabulary_machine_name != $link_term_to_facet['vocabulary_name']) {
        $link = l($taxonomy->name, "/taxonomy/term/" . $taxonomy->tid);
      }
      else {
        $options['query'] = array(
          'f[0]' => $link_term_to_facet['vocabulary_name'] . ':' . $taxonomy->tid,
        );

        $link = l($taxonomy->name, 'groups', $options);
      }

      $local_tree[] = $link;
    }

    // If it's the last item on the local tree, it's the parent. We need
    // to distinguish between the parent and its children because the
    // parent needs to get a different style.
    $root = array_pop($local_tree);

    // Use the taxonomy tree theme to style the local tree.
    $variables = array(
      'root' => $root,
      // Join the local_tree array to a string.
      'local_tree' => implode(', ', $local_tree),
    );
    $tree .= theme('c4m_taxonomy_tree', $variables);
  }

  $tag['element'] = array(
    '#tag'   => 'div',
    '#value' => $tree,
  );

  return theme_html_tag($tag);
}
