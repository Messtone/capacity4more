<?php
/**
 * @file
 * Code for the Article content type feature.
 */

include_once 'c4m_content_article.features.inc';

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_article_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_articles' => array(
        'type'        => 'article',
        'entity_type' => 'node',
        'bundles'     => array('article'),
        'singular'    => 'Article',
        'plural'      => 'Articles',
        'state'       => NULL,
        'aggregate'   => array(),
        'weight'      => -5,
        'attributes'  => array(
          'class' => array('articles'),
        ),
        'link' => array(
          'path' => 'articles',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_articles' => array(
        'type'        => 'article',
        'entity_type' => 'node',
        'bundles'     => array('article'),
        'singular'    => 'Article',
        'plural'      => 'Articles',
        'state'       => NULL,
        'aggregate'   => array(),
        'weight'      => 2,
        'attributes'  => array(
          'class' => array('topic-articles'),
        ),
        'link' => array(
          'path' => 'articles',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_node_update().
 * Subscribe notable contributors to the node.
 */
function c4m_content_article_node_update($node) {
  $contributors_original = field_get_items('node', $node->original, 'c4m_related_user');
  $contributors = field_get_items('node', $node, 'c4m_related_user');

  foreach($contributors as $contributor) {
    if (!in_array($contributor, $contributors_original)) {
      flag('subscribe_c4m_follow_node', $node->nid, $contributor);
    }
  }

  foreach($contributors_original as $contributor_original) {
    if (!in_array($contributor_original, $contributors)) {
      unflag('subscribe_c4m_follow_node', $node->nid, $contributor_original);
    }
  }
}
