<?php
/**
 * @file
 * Code for the Project content type feature.
 */

include_once 'c4m_content_project.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_content_project_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_c4m_og_vocab_info_groups().
 */
function c4m_content_project_c4m_og_vocab_info_groups() {
  return array(
    'project' => array(
      'c4m_vocab_category',
      'c4m_vocab_tag',
    ),
  );
}

/**
 * Implements hook_c4m_content_statistics_info().
 *
 * @todo add c4m_status when it's available in the project content type
 */
function c4m_content_project_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_projects' => array(
        'type'        => 'project',
        'entity_type' => 'node',
        'bundles'     => array('project'),
        'singular'    => 'Project',
        'plural'      => 'Projects',
        'state'       => 1,
        'aggregate'   => array(),
        'weight'      => -3,
        'attributes'  => array(
          'class' => array('projects'),
        ),
        'link' => array(
          'path' => 'projects',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_projects' => array(
        'type'        => 'project',
        'entity_type' => 'node',
        'bundles'     => array('project'),
        'singular'    => 'Project',
        'plural'      => 'Projects',
        'state'       => 1,
        'aggregate'   => array(),
        'weight'      => 1,
        'attributes'  => array(
          'class' => array('topic-projects'),
        ),
        'link' => array(
          'path' => 'projects',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function c4m_content_project_block_info() {
  $blocks = array();

  $blocks['c4m_block_create_project'] = array(
    'info' => t('Project: Create project'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['c4m_block_project_partners'] = array(
    'info' => t('Project: Partners'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_project_block_view($delta) {
  $module = 'c4m_content_project';

  module_load_include('inc', $module, $module . '.block');
  $callback = "_{$module}_block_" . $delta;
  if (function_exists($callback)) {
    return $callback();
  }

  return array();
}

/**
 * Implements hook_FORM_ID_form_alter().
 *
 * Alter the Project creation form.
 */
function c4m_og_form_project_node_form_alter(&$form, &$form_state) {
  // Form changes on creation.
  if (!$form['nid']['#value']) {
    // Change title.
    drupal_set_title('Request project');

    // Change submit button on creation.
    $form['actions']['submit']['#value'] = t('Request');
  }
}

/**
 * Returns the administered groups count for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_user_get_administered_projects_count($uid) {
  return c4m_og_get_user_administered_groups_count($uid, 'project');
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_project_c4m_helper_entity_label_info() {
  return array(
    'project' => array(
      'article' => t('a'),
      'singular' => t('project'),
      'plural' => t('projects'),
      'insert action' => t('created a new project'),
      'update action' => t('updated the project'),
      'icon' => 'fa-users',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_project_field_formatter_info() {
  return array(
    'c4m_partner_formatter' => array(
      'label' => t('C4M Partner'),
      'field types' => array('image'),
      'settings'  => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_project_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    // Load title and url for the paragraph.
    $title = $entity->c4m_heading[LANGUAGE_NONE][0];
    $url = isset($entity->c4m_link[LANGUAGE_NONE][0]) ? $entity->c4m_link[LANGUAGE_NONE][0] : FALSE;

    // Create image element + link if available.
    $source = theme('image_style', array(
      'style_name' => 'thumbnail',
      'path' => $item['uri'],
      'title' => $title['safe_value']));

    if ($url) {
      $element[] = array(
        '#markup' => l($source, $url['display_url'], array(
          'html' => TRUE,
          'attributes' => array(
            'target' => $url['attributes']['target']
          )
        ))
      );
    }
    else {
      $element[] = array('#markup' => $source);
    }
  }

  return $element;
}

/**
 * Alter referenceable blocks, BEFORE the autocomplete match.
 *
 * @see hook_blockreference_blocks_pre_alter()
 */
function c4m_content_project_blockreference_blocks_pre_alter(&$blocks, $context) {
  $whitelist = module_invoke_all('c4m_content_project_blockreference_whitelist');

  // Remove blocks which are not whitelisted.
  foreach ($blocks as $id => $block) {
    $block_string = $block->module . ':' . $block->delta;
    if (!in_array($block_string, $whitelist) && !array_key_exists($block_string, $whitelist)) {
      unset($blocks[$id]);
    }
    else {
      if (array_key_exists($block_string, $whitelist)) {
        $block->info = $whitelist[$block_string]['label'];
      }
    }
  }
}

/**
 * Implements hook_pc_system_component_blockreference_whitelist().
 */
function c4m_content_project_c4m_content_project_blockreference_whitelist() {
  return array(
    'c4m_content_project:c4m_block_project_partners' => array(
      'label' => t('Project partners'),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_project_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_user_projects_administered' => array(
      'type' => 'projects_administered',
      'context'  => 'user',
      'callback' => 'c4m_user_get_administered_projects_count',
    ),
  );
}
