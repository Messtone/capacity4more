<?php
/**
 * @file
 * Code for the User Profile feature.
 */

include_once 'c4m_user_profile.features.inc';

/**
 * Implements hook_field_extra_fields_alter().
 */
function c4m_user_profile_field_extra_fields_alter(&$info) {
  // Make sure that the Account fields are always at the top of the
  // user profile.
  if (isset($info['user']['user']['form']['account']['weight'])) {
    $info['user']['user']['form']['account']['weight'] = -100;
  }
}

/******************************************************************************
 * BLOCK
 ******************************************************************************/

/**
 * Implements hook_block_info().
 */
function c4m_user_profile_block_info() {
  $blocks['user_welcome'] = array(
    'info' => t('Welcome the user in the top bar'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );

  $blocks['user_notifications'] = array(
    'info' => t('Display the user notifications etc...'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_user_profile_block_view($delta = '') {
  $module_name = 'c4m_user_profile';
  module_load_include('inc', $module_name, "{$module_name}.block");
  $callback = "_{$module_name}_block_" . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Implements hook_token_info().
 */
function c4m_user_profile_token_info() {
  $info['tokens']['user']['full-name'] = array(
    'name'        => t('User Full Name'),
    'description' => t('Returns the User Full Name)'),
  );
  $info['tokens']['user']['url-with-name'] = array(
    'name' => t("User profile URL with fallback for anonymous users"),
    'description' => t("The URL of the account profile page, with fallback if anonymous."),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function c4m_user_profile_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $url_options = array('absolute' => TRUE);

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'full-name':
          $replacements[$original] = c4m_user_name($account);
          break;

        case 'url-with-name':
          $name = c4m_user_name($account);
          $replacements[$original] = !empty($account->uid) ? l(
            $name, "user/$account->uid", $url_options
          ) : $name;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_facet_items_alter().
 */
function c4m_user_profile_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'c4m_country':
      _c4m_user_profile_facet_country_alter($build, $settings);
      break;
  }
}

/**
 * Helper function to alter the facet for the country.
 *
 * Display full country name instead of country code.
 *
 * @param array $build
 *    The facets.
 * @param object $settings
 *    Facet settings.
 */
function _c4m_user_profile_facet_country_alter(array &$build, $settings) {
  $field = field_info_field($settings->facet);
  $allowed_values = list_allowed_values($field);
  foreach ($build as $key => $item) {
    $options = array(
      '@country' => ucwords(
        drupal_strtolower($allowed_values[drupal_strtoupper($key)])
      ),
    );
    $build[$key]["#markup"] = t('@country', $options);
  }
}

/**
 * Implements hook_theme().
 */
function c4m_user_profile_theme() {
  $theme['c4m_user_profile_picture_fullname'] = array(
    'variables' => array(
      'user' => array(),
      'link' => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  $theme['c4m_user_profile_menu'] = array(
    'variables' => array(
      'menu_items'  => array(),
      'attributes'  => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  return $theme;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Our implementation needs to fire after legal module.
 */
function c4m_user_profile_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['c4m_user_profile'])) {
    $c4m_user_profile = $implementations['c4m_user_profile'];
    unset($implementations['c4m_user_profile']);
    $implementations['c4m_user_profile'] = $c4m_user_profile;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_profile_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['mail']['#element_validate'][] = 'c4m_user_profile_element_validate_mail';

  if (($key = array_search('user_account_form_validate', $form['#validate'])) !== FALSE) {
    unset($form['#validate'][$key]);
  }
  array_unshift($form['#validate'], 'c4m_user_profile_account_form_validate');
}

/**
 * Validator callback c4m_user_profile_account_form_validate().
 *
 * Replaces user_account_form_validate() and removes the code related to email
 * validation.
 */
function c4m_user_profile_account_form_validate($form, &$form_state) {
  if ($form['#user_category'] != 'account' && $form['#user_category'] != 'register') {
    return;
  }

  $account = $form['#user'];
  // Validate new or changing username.
  if (isset($form_state['values']['name'])) {
    if ($error = user_validate_name($form_state['values']['name'])) {
      form_set_error('name', $error);
    }
    elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('name', db_like($form_state['values']['name']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      form_set_error('name', t('The name %name is already taken.', array('%name' => $form_state['values']['name'])));
    }
  }

  // Make sure the signature isn't longer than the size of the database field.
  // Signatures are disabled by default, so make sure it exists first.
  if (isset($form_state['values']['signature'])) {
    // Move text format for user signature into 'signature_format'.
    $form_state['values']['signature_format'] = $form_state['values']['signature']['format'];
    // Move text value for user signature into 'signature'.
    $form_state['values']['signature'] = $form_state['values']['signature']['value'];

    $user_schema = drupal_get_schema('users');
    if (drupal_strlen($form_state['values']['signature']) > $user_schema['fields']['signature']['length']) {
      form_set_error('signature', t('The signature is too long: it must be %max characters or less.', array('%max' => $user_schema['fields']['signature']['length'])));
    }
  }
}

/**
 * Validator callback for mail field.
 */
function c4m_user_profile_element_validate_mail($element, &$form_state, $form) {
  // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
  // warnings often caused by cutting and pasting.
  $mail = trim($form_state['values']['mail']);
  form_set_value($form['account']['mail'], $mail, $form_state);

  $errors = module_invoke_all('c4m_user_profile_validate_email', $mail, $form_state, $form);

  if ($errors) {
    foreach ($errors as $error) {
      form_error($element, $error);
    }
  }
}

/**
 * Implements hook_c4m_user_profile_validate_email().
 */
function c4m_user_profile_c4m_user_profile_validate_email($mail, $form_state, $form) {
  if (!$mail) {
    return array(0 => t('You must enter an e-mail address.'));
  }

  if (!valid_email_address($mail)) {
    return array(0 => t('The e-mail address %mail is not valid.', array('%mail' => $mail)));
  }

  if (!($other_user = user_load_by_mail($mail))) {
    return array();
  }

  $other_user = entity_metadata_wrapper('user', $other_user);
  if ($other_user->status->value()) {
    return array(0 => t('This account is already in use. If this is you, please log in.'));
  }
  elseif (!$other_user->last_login->value() && !$other_user->last_access->value()) {
    return array(0 => t('This email address is already in use. Please activate your account, or re-send activation mail.'));
  }
  elseif ($other_user->c4m_is_spammer->value()) {
    return array(0 => t('This account has been blocked. Contact site administrator for more information.'));
  }
  elseif ($other_user->c4m_is_deleted->value()) {
    return array(
      0 => t('There is a problem with your account, please !contact the site administrators.', array(
        '!contact' => l(t('contact'), 'contact'),
      )),
    );
  }

  $account = $form['#user'];
  if ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('mail', db_like($form_state['values']['mail']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    // Format error message dependent on whether the user is logged in or not.
    if ($GLOBALS['user']->uid) {
      return array(0 => t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['mail'])));
    }
    else {
      return array(
        0 => t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array(
          '%email' => $form_state['values']['mail'],
          '@password' => url('user/password'),
        )),
      );
    }
  }
}
