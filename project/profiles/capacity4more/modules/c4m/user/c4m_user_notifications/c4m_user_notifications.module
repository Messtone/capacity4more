<?php

/**
 * @file
 * Code for the C4M notifications feature.
 */


function c4m_user_notifications_load_includes() {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications_handlers');
}

/**
 * Implements hook_entity_update.
 *
 * Triggers email notification for membership update.
 *
 * Notified states:
 *   Pending -> Accepted
 *   Pending -> Rejected
 */
function c4m_user_notifications_entity_update($entity, $type) {
  if ($type != 'og_membership') {
    return;
  }

  if (empty($entity->original)) {
    // Must have original state.
    return;
  }

  if ($entity->original->state != OG_STATE_PENDING) {
    // State change has to be initiated when state is Pending.
    return;
  }

  // Loading group/project to resolve it's membership type - moderated/open
  $node = node_load($entity->gid);
  $wrapper = entity_metadata_wrapper('node', $node);
  $moderated = $wrapper->field_membership_open_request->value();

  c4m_user_notifications_load_includes();

  switch($entity->state) {
    case OG_STATE_ACTIVE:
      if ($moderated == C4M_OG_MODERATED_GROUP ) {
        c4m_user_notifications_moderated_group_notify_user_membership_accepted($entity);
        c4m_user_notifications_moderated_group_notify_admins_membership_accepted($entity);
      }
      else if ($moderated == C4M_OG_OPEN_GROUP) {
        c4m_user_notifications_open_group_notify_user_membership_accepted($entity);
        c4m_user_notifications_open_group_notify_admins_membership_accepted($entity);
      }
      break;

    case OG_STATE_BLOCKED:
      if ($moderated == C4M_OG_MODERATED_GROUP ) {
        c4m_user_notifications_moderated_group_notify_user_membership_rejected($entity);
      }
      break;
  }
}

/**
 * Implements hook_node_update.
 *
 * Triggers email notification for node (group/project) status update.
 */
function c4m_user_notifications_node_update($node) {
  if ($node->type != 'group' || $node->type != 'project') {
    // Return early, if node type is not group/project.
    return;
  }

  $status = $node->c4m_og_status->value();
  c4m_user_notifications_load_includes();
  switch ($status) {
    case 'published':
      if (empty($node->original)) {
        c4m_user_notifications_group_status_set_published($node);
      }
      else {
        $prev_status = $node->original->c4m_og_status->value();
        if ($prev_status == 'archived' || $prev_status == 'unpublished' || $prev_status == 'deleted') {
          c4m_user_notifications_group_status_set_republished($node);
        }
      }
    break;

    case 'unpublished': c4m_user_notifications_group_status_set_unpublished($node);
    break;

    case 'archived': c4m_user_notifications_group_status_set_archived($node);
    break;
    // Soft delete.
    case 'delete': c4m_user_notifications_group_status_set_softdeleted($node);
    break;
  }

  return;
}


/**
 * Implements hook_node_delete.
 *
 * Triggers email notification for node (group/project) delete.
 */
function c4m_user_notifications_node_delete($node) {
  if ($node->type != 'group' || $node->type != 'project') {
    // Return early, if node type is not group/project.
    return;
  }

  c4m_user_notifications_load_includes();
  c4m_user_notifications_group_hard_deleted($node);
}

/**
 * Implements hook_comment_insert.
 *
 * Triggers email notification for comment insert.
 */
function c4m_user_notifications_comment_insert($comment) {
  c4m_user_notifications_load_includes();
  c4m_user_notifications_notify_user_commented($comment);
}
