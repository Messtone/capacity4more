<?php

/**
 * @file
 * Invite new members to a group or project.
 */

/**
 * Implements hook_menu().
 */
function c4m_og_invite_visitors_menu() {
  $items = array();
  $items['group/%/%/admin/members/invite'] = array(
    'page callback' => 'drupal_get_form',
    'title' => 'Invite members',
    'page arguments' => array('_c4m_og_invite_visitors_new_users_form', 1, 2),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'access callback' => 'c4m_og_invite_visitors_user_access',
    'access arguments' => array('invite members', 1, 2),
  );

  return $items;
}

/**
 * Implements hook_og_ui_get_group_admin()
 */
function c4m_og_invite_visitors_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_user_access($group_type, $gid, 'invite members')) {
    $items['c4m_og_invite_visitors'] = array(
      'title' => t('Invite members'),
      'description' => t('Create new users and add them as group members.'),
      'href' => 'admin/members/invite',
    );
  }

  return $items;
}

/**
 * Check if entity is a group, and user has permission - Access.
 */
function c4m_og_invite_visitors_user_access($perm, $group_type, $gid) {
  global $user;

  $group = entity_load_single($group_type, $gid);
  if (!$group || !og_is_group($group_type, $group)) {
    return FALSE;
  }


  // SAs, GOs and GAs can invite new members.
  if (_c4m_features_og_members_is_power_user($group)) {
    return TRUE;
  }

  // Get request type (open/moderated).
  $membership_request_value = c4m_og_get_group_membership_request($group);
  // Get access type (public/private).
  $access_type = c4m_og_get_access_type($group);

  // For private or moderated groups, return false. Else check for member.
  if ($access_type['type'] == 'private' || $membership_request_value == 'moderated') {
    return FALSE;
  }
  else {
    return og_is_member($group->type, $group->nid, 'user', $user);
  }
}

/**
 * Implement hook_og_permission().
 */
function c4m_og_invite_visitors_og_permission() {
  $items = array();
  $items['invite members'] = array(
    'title' => t('Invite members'),
    'description' => t('Users may invite other users to the group without approval.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  return $items;
}

/**
 * Main OG Invite members form.
 */
function _c4m_og_invite_visitors_new_users_form($form, &$form_state, $group_type, $gid) {
  og_set_breadcrumb($group_type, $gid, array(l(t('Group'), "$group_type/$gid/group")));
  $group = entity_load_single($group_type, $gid);
  $label = entity_label($group_type, $group);
  list(, , $bundle) = entity_extract_ids($group_type, $group);
  $og_roles = array('') + og_roles($group_type, $bundle, $gid, FALSE, FALSE);

  $form['group_type'] = array('#type' => 'value', '#value' => $group_type);
  $form['gid'] = array('#type' => 'value', '#value' => $gid);

  $form['c4m_og_invite_visitors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Invite new users to %group', array('%group' => $label)),
  );
  $form['c4m_og_invite_visitors']['invitee'] = array(
    '#type' => 'textarea',
    '#title' => t('User email(s)'),
    '#description' => t('Use commas or new lines to split email addresses. The new users will be created and invited as members of this group. A one time login link will be sent to the invitees\' email.  '),
    '#required' => TRUE,
  );
  $form['og_invite_people']['roles'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Assign roles'),
    '#description' => t('Choose one or more roles you would like to assign to the users. ("member" role is assigned by default)'),
    '#options' => $og_roles,
    '#size' => 5
  );
  $form['c4m_og_invite_visitors']['state'] = array(
    '#type' => 'select',
    '#title' => t('Membership state'),
    '#options' => og_group_content_states(),
    '#description' => t('Select the state of the membership.'),
  );
  $form['c4m_og_invite_visitors']['personal_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#description' => t('Add a personal subject to the invitation email.'),
  );
  $form['c4m_og_invite_visitors']['personal_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Add a message (optional)'),
    '#description' => t('Add a personal message to the invitation email.'),
  );

  $field_names = og_get_group_audience_fields('user', 'user', $group_type);
  $field_name = !empty($form_state['values']['field_name']) ? $form_state['values']['field_name'] : key($field_names);

  if (count($field_names) > 1) {
    $form['c4m_og_invite_visitors']['field_name'] = array(
      '#type' => 'select',
      '#title' => t('Field name'),
      '#options' => $field_names,
      '#default_value' => $field_name,
      '#description' => t('Select the field name, the group membership should be registered in.'),
    );
  }
  else {
    // There is only a single field name, so just pass it as a value.
    $form['c4m_og_invite_visitors']['field_name'] = array(
      '#type' => 'value',
      '#value' => $field_name,
    );
  }

  $form_state['field_name'] = $field_name;

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Invite user(s)')
  );

  return $form;
}

/**
 * Validation handler for _c4m_og_invite_visitors_new_users_form.
 */
function _c4m_og_invite_visitors_new_users_form_validate($form, &$form_state) {
  $invitee_emails = preg_split('/\s*[,\n]\s*/', $form_state['values']['invitee']);
  $form_state['invitee_emails'] = array();

  foreach (array_filter($invitee_emails) as $invitee_email) {
    if (!valid_email_address($invitee_email)) {
      form_set_error('invitee', t('Invalid email ' . $invitee_email));
    }
    else {
      $form_state['invitee_emails'][] = $invitee_email;
    }
  }
}

/**
 * Submit handler for _c4m_og_invite_visitors_new_users_form.
 */
function _c4m_og_invite_visitors_new_users_form_submit($form, &$form_state) {
  $group_type = $form_state['values']['group_type'];
  $gid = $form_state['values']['gid'];
  $invitee_emails = $form_state['invitee_emails'];
  $og_roles = $form_state['values']['roles'];
  $state = $form_state['values']['state'];
  $field_name = $form_state['field_name'];
  $form_fields = array(
    'subject' => $form_state['values']['personal_subject'],
    'body' => $form_state['values']['personal_message']
  );
  $entity_type = 'user';
  $all_states = og_group_content_states();

  // Add group membership form.
  $values = array();

  foreach ($invitee_emails as $invitee_email) {
    $had_account = FALSE;

    // Try to load the user by email and see if exists.
    if ($account = user_load_by_mail($invitee_email)) {
      $had_account = TRUE;
      $message = t('%user is already known and has been added to the group.', array('%user' => format_username($account)));
    }
    else {
      // Create a user and return $account object.
      $account = _c4m_og_invite_visitors_create_user($invitee_email, $form_fields);
      $message = t('%user has been created and an email notification was sent.', array('%user' => format_username($account)));
    }

    // Check if user is already assigned to the group. Any "state" (active, pending,... counts as existing).
    if ($had_account && og_is_member($group_type, $gid, $entity_type, $account, array())) {
      // Load OG membership.
      $og_membership = og_get_membership($group_type, $gid, $entity_type, $account->uid);
      $message = t('%user is already a member of this group.', array('%user' => format_username($account)));
    }
    else {
      // Create OG membership and add user to group.
      $og_membership = og_membership_create($group_type, $gid, $entity_type, $account->uid, $field_name, $values);
    }

    // Update OG memebership if necessary.
    if ($og_membership->state != $state) {
      $message .= t(' Membership state changed from "%prev_state" to "%post_state"', array(
        '%prev_state' => $all_states[$og_membership->state],
        '%post_state' => $all_states[$state]
      ));
      $og_membership->state = $state;
    }

    // Save the OG membership.
    $og_membership->save();

    // Add OG roles to users.
    foreach ($og_roles as $rid) {
      og_role_grant($group_type, $gid, $account->uid, $rid);
    }

    // Offer invitee user account object in form_state.
    $form_state['account'][] = $account;

    // Invoke hook_c4m_og_invite_visitors_invited() - after a user is created and added to group.
    module_invoke_all('c4m_og_invite_visitors_invited', $account, $og_membership);

    // Print the message for each user.
    drupal_set_message($message);
  }
}

/**
 * Implements hook_mail().
 */
function c4m_og_invite_visitors_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array(
    'user' => $params['account'],
    'message' => $message,
    'form_fields' => $params['form_fields'],
  );
  $message['subject'] .= _c4m_og_invite_visitors_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _c4m_og_invite_visitors_mail_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by c4m_og_invite_visitors_mail() and the settings forms to retrieve strings.
 */
function _c4m_og_invite_visitors_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('c4m_og_invite_visitors_mail_' . $key, FALSE)) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'invite_group_member_subject':
        $text = t('[personal:subject]', array(), array('langcode' => $langcode));
        break;
      case 'invite_group_member_body':
        $text = t(<<<EOD
<p>
Hello,
</p>
 
<p><br>
[user:full_name] invited you to join the following [group:node_type] at [site:name]: <strong>[group:node_title]</strong> 
</p>
 
<p>See their message below:</p>
 
<p> 
[personal:body]
</p>
 
<p>
To accept this invitation, click <a href="[group:accept_invite_url]">Join this Group</a>.
</p>
 
<p> 
<a href="[user:public-profile-url]">[user:full_name]</a>,
member of [group:node_title].
</p>
EOD
        , array(), array('langcode' => $langcode));
        break;
    }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array('language' => $language, 'callback' => 'c4m_og_invite_visitors_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));
  }

  return $text;
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * _c4m_og_invite_visitors_mail_text() to set up some additional tokens that can be
 * used in email messages generated by c4m_og_invite_visitors_mail().
 *
 * @param $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param $data
 *   An associative array of token replacement values. If the 'user' element
 *   exists, it must contain a user account object with the following
 *   properties:
 *   - login: The UNIX timestamp of the user's last login.
 *   - pass: The hashed account login password.
 * @param $options
 *   Unused parameter required by the token_replace() function.
 */
function c4m_og_invite_visitors_mail_tokens(&$replacements, $data, $options) {
  global $user, $base_url;
  if (isset($data['user'])) {
    $group = c4m_og_current_group();
    $url_options = array(
      'absolute' => TRUE,
      'purl' => array(
        'provider' => 'og_purl|node',
        'id' => $group->nid,
      ),
    );

    $replacements['[user:full_name]'] = c4m_user_name($user);
    $replacements['[user:public-profile-url]'] = $base_url . '/users/' .preg_replace('@[^a-z0-9-]+@', '-', strtolower(trim($replacements['[user:full_name]'])));
    $replacements['[group:node_type]'] = $group->type;
    $replacements['[group:node_title]'] = $group->title;
    $replacements['[group:accept_invite_url]'] = user_pass_reset_url($data['user']);
    $replacements['[group:dashboard_url]'] = url('<front>', $url_options);
    $replacements['[personal:subject]'] = $data['form_fields']['subject'];
    $replacements['[personal:body]'] = $data['form_fields']['body'];
    $replacements['[site:name]'] = variable_get('site_name', 'Capacity 4 More');
  }
}

/**
 * Create new user and send email.
 *
 * @param string $invitee_email
 * @return object $account
 */
function _c4m_og_invite_visitors_create_user($invitee_email, $form_fields) {
  // This will generate a random password.
  $password = user_password(8);

  // Username from email.
  $name = explode('@', $invitee_email);

  // To prepare the email address as a username, trim any potential leading
  // and trailing spaces and replace simple illegal characters with hyphens.
  // @see user_validate_name().
  $name = preg_replace('/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i', '-', trim($name[0]));

  // Check if user name is available and append _NUM if existing.
  if (user_load_by_name($name)) {
    $i = 1;
    $new_name = $name . '_' . $i;
    while (user_load_by_name($new_name)) {
      $i++;
      $new_name = $name . '_' . $i;
    }
    $name = $new_name;
  }

  // Set up the user fields.
  $fields = array(
    'name' => $name,
    'mail' => $invitee_email,
    'pass' => $password,
    'status' => 1,
    'init' => 'email address',
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );

  // Create new user function.
  $account = user_save('', $fields);

  // Send the e-mail through the user module.
  drupal_mail('c4m_og_invite_visitors', 'invite_group_member', $invitee_email, NULL, array('account' => $account, 'form_fields' => $form_fields), variable_get('site_mail', NULL));

  return $account;
}
