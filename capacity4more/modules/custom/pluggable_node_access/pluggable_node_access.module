<?php

/**
 * @file
 * Control the group and group content view access of groups by custom logic.
 */

/**
 * Implements hook_entity_info().
 */
function pluggable_node_access_entity_info() {
  $items['pluggable_node_access'] = array(
    'label' => t('Pluggable node access'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'PluggableNodeAccess',
    'base table' => 'pluggable_node_access',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => FALSE,
      'bundle' => 'type',
      'language' => 'language',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
    'module' => 'pluggable_node_access',
    'metadata controller class' => 'EntityDefaultMetadataController',
    'views controller class' => 'EntityDefaultViewsController',
    'entity cache' => module_exists('entitycache'),
  );

  // Add bundles by plugins.
  foreach (pluggable_node_access_get_pluggable_node_access_plugins() as $plugin_name=> $plugin) {
    $items['pluggable_node_access']['bundles'][$plugin_name] = array(
      'label' => $plugin['label'],
      'admin' => array(
        'path' => 'admin/structure/pluggable_node_access/manage/%pluggable_node_access',
        'real path' => 'admin/structure/pluggable_node_access/manage/' . $plugin_name,
        'bundle argument' => 4,
        'access arguments' => array('administer Pluggable node access types'),
      ),
    );
  }

  return $items;
}

/**
 * Implements hook_og_fields_info().
 */
function pluggable_node_access_og_fields_info() {
  $items['pluggable_node_access'] = array(
    'type' => array('group', 'group_content'),
    'description' => t('Reference to Pluggable node access entities.'),
    'field' => array(
      'field_name' => 'pluggable_node_access',
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'target_type' => 'pluggable_node_access',
      ),
    ),
    'instance' => array(
      'label' => t('Pluggable node access'),
      'description' => t('Reference to Pluggable node access entities.'),
    ),
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function pluggable_node_access_ctools_plugin_directory($module, $plugin) {
  if ($module == 'pluggable_node_access') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function pluggable_node_access_ctools_plugin_type() {
  $plugins['pluggable_node_access'] = array(
    'classes' => array('class'),
    'process' => 'pluggable_node_access_plugin_process',
  );
  return $plugins;
}


/**
 * Add defaults values to the normalizer related plugins.
 */
function pluggable_node_access_plugin_process(&$plugin, $info) {
  // Common operations.
  $plugin += array(
    'description' => '',
  );

  // Call the plugin specific process functions.
  $function = 'pluggable_node_access_process_' . $info['type'];
  if (function_exists($function)) {
    $function($plugin, $info);
  }
}

/**
 * Include CTools plugins and get all normalizer plugins.
 *
 * @return array
 *   All normalizing plugins.
 */
function pluggable_node_access_get_pluggable_node_access_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('pluggable_node_access', 'pluggable_node_access');
}

/**
 * Include CTools plugins and get the specified electricity normalizer plugin.
 *
 * @param string $plugin_name
 *   If provided this function only returns the selected plugin.
 *
 * @return array
 *   The selected plugin for electricity normalizer.
 */
function pluggable_node_access_get_pluggable_node_access_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('pluggable_node_access', 'pluggable_node_access', $plugin_name);
}

/**
 * Return the handler based on major and minor version, and resource name.
 *
 * @param $plugin_name
 *  Name of plugin.
 * @param $node
 *   The node object.
 *
 * @throws Exception
 *  Class not found.
 *
 * @return PluggableNodeAccessInterface
 *   The handler object.
 */
function pluggable_node_access_get_pluggable_node_access_handler($plugin_name, $node) {
  $cache = &drupal_static(__FUNCTION__);
  if (isset($cache[$plugin_name])) {
    return $cache[$plugin_name];
  }

  $cache[$plugin_name] = NULL;

  ctools_include('plugins');
  $plugin = ctools_get_plugins('pluggable_node_access', 'pluggable_node_access', $plugin_name);
  if (!$class = ctools_plugin_load_class('pluggable_node_access', 'pluggable_node_access', $plugin_name, 'class')) {
    throw new \Exception("OG access plugin class for '$plugin_name' not found.");
  }
  $handler = new $class($plugin, $node);
  $cache[$plugin_name] = $handler;

  return $cache[$plugin_name];
}


/**
 * Implements hook_node_grants().
 */
function pluggable_node_access_node_grants($account, $op) {
  $grants = array();
  foreach (pluggable_node_access_get_pluggable_node_access_plugins() as $plugin_name => $plugin) {
    $result = call_user_func(array($plugin['class'], 'getNodeGrants'), $account, $op);
    $grants = array_merge_recursive($grants, $result);
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function pluggable_node_access_node_access_records($node) {
  $grants = array();
  foreach (pluggable_node_access_get_pluggable_node_access_plugins() as $plugin_name => $plugin) {
    $handler = pluggable_node_access_get_pluggable_node_access_handler($plugin_name, $node);
    $result = $handler->getNodeAccessRecords();
    $grants = array_merge_recursive($grants, $result);
  }

  return $grants;
}
