<?php
/**
 * @file
 */

/**
 * Implements hook_field_widget_info().
 */
function c4m_vocab_og_widget_field_widget_info() {
  $widgets['c4m_og_widget'] = array(
    'label' => t('C4M OG vocab widget'),
    'description' => t('OG vocab widget using AngularJs.'),
    'field types' => array('entityreference'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 */
function c4m_vocab_og_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  global $user;
  $account = clone $user;

  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
  $entity_type = $instance['entity_type'];
  $bundle = $instance['bundle'];

  if (!$entity) {
    return;
  }
  $use_context = !empty($field['settings']['handler_settings']['behaviors']['og_vocab']['use_context']) ? $field['settings']['handler_settings']['behaviors']['og_vocab']['use_context'] : 'yes';
  $gids = array();

  if (in_array($use_context, array('force', 'yes')) && module_exists('og_context') && $context = og_context()) {
    $gids[$context['group_type']][$context['gid']] = array($context['gid']);
  }
  elseif (in_array($use_context, array('yes', 'no')) && !$gids) {
    $gids = og_get_entity_groups('user', $account);
  }

  if (!$gids) {
    return;
  }

  $group_type = key($gids);

  $group_id = key($gids[$group_type]);

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  $accessible_vocabs = og_vocab_get_accessible_vocabs($entity_type, $bundle, $field['field_name']);

  //dpm($accessible_vocabs);
  $terms = taxonomy_get_tree(array_shift($accessible_vocabs));

  $options = array();
  foreach($terms as $term) {
    $parents = $term->parents;
    if ($parents[0] == '0') {
      $options[$term->tid]['label'] = check_plain($term->name);
      $options[$term->tid]['id'] = $term->tid;
    }
    else {
      $options[$parents[0]]['children'][] = array(
        'label' => check_plain($term->name),
        'id' => $term->tid,
      );
    }
  }
  $settings['c4m']['data']['vocabularies']['categories'] = $options;

  $settings['c4m']['basePath'] = url('', $options);

  $settings['c4m']['data']['group'] = $group_id;

  drupal_add_js($settings, 'setting');


//og_vocabulary[und][0][13][124]:124
//og_vocabulary[und][0][13][122]:122
//og_vocabulary[und][0][14]:Rafael Nadal (103)
//og_group_ref[und][0][default]:6


  // Add the directive.
  $directives = theme('c4m_vocab_language_taxonomy_widget', array('vocabulary_name' => 'categories')).theme('c4m_vocab_og_widget', array());

  $form['directive-tags'] = array(
    '#markup' => $directives,
    '#weight' => $instance['widget']['weight'],
  );
  $form['#attributes']['ng-controller'] = 'DrupalFormCtrl';
  $form['#attributes']['class'][] = 'drupal-form';

  // Using default widget, that will be hidden.
  $instance['widget']['active'] = 1;
  $element = og_vocab_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  $element['#title'] = '';
//  $element['#prefix'] = '<div class="ng-hide">';
//  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Implements hook_theme().
 */
function c4m_vocab_og_widget_theme() {
  $theme['c4m_vocab_og_widget'] = array(
    'template' => 'c4m_vocab_og_widget',
    'path' => drupal_get_path('module', 'c4m_vocab_og_widget') . '/templates',
    'variables' => array(),
  );

  return $theme;
}
