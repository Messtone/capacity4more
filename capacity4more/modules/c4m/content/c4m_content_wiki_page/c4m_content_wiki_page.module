<?php
/**
 * @file
 * Code for the Wiki page content type feature.
 */

include_once 'c4m_content_wiki_page.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_content().
 *
 * @return array
 */
function c4m_content_wiki_page_c4m_og_vocab_info_content() {
  return array(
    'wiki_page' => array(
      'entity_type' => 'node',
      'bundle' => 'wiki_page',
      'vocabularies' => array(
        'c4m_vocab_category',
        'c4m_vocab_tag'
      ),
    ),
  );
}

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_content_wiki_page_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_content_wiki_page');

  $fields['node']['c4m_content_wiki_page_navigation'] = array(
    'title' => t('Wiki page navigation'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('wiki_page|*'),
    'file' => $path . '/includes/c4m_content_wiki_page.theme.inc',
    'function' => 'theme_c4m_content_wiki_page_navigation',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  return $fields;
}

/**
 *  Implements hook_theme_registry_alter().
 */
function c4m_content_wiki_page_theme_registry_alter(&$theme_registry) {
  // We change the default preprocessing book module executes on the
  // book navigation.

  if (empty($theme_registry['book_navigation'])) {
    return;
  }
  $key = array_search('template_preprocess_book_navigation',
    $theme_registry['book_navigation']['preprocess functions']);

  // Replace the preprocess function.
  $theme_registry['book_navigation']['preprocess functions'] =array_replace(
    $theme_registry['book_navigation']['preprocess functions'],
    array($key => 'c4m_content_wiki_page_preprocess_book_navigation'));
}

/**
 * Processes variables for book-navigation.tpl.php.
 *
 * Override of template_preprocess_book_navigation()
 * Only difference is that we do not show links to level 0 of book.
 *
 * @param $variables
 *   An associative array containing the following key:
 *   - book_link
 *
 * @see book-navigation.tpl.php
 */
function c4m_content_wiki_page_preprocess_book_navigation(&$variables) {
  $book_link = $variables['book_link'];

  // Provide extra variables for themers. Not needed by default.
  $variables['book_id'] = $book_link['bid'];
  $variables['book_title'] = check_plain($book_link['link_title']);
  $variables['book_url'] = 'node/' . $book_link['bid'];
  $variables['current_depth'] = $book_link['depth'];
  $variables['tree'] = '';

  if ($book_link['mlid']) {
    $variables['tree'] = book_children($book_link);
    $prev = book_prev($book_link);
    if ($prev &&
        // Don't show link to level 0.
        $prev['mlid'] != $book_link['p1']) {
      $prev_href = url($prev['href']);
      drupal_add_html_head_link(array('rel' => 'prev', 'href' => $prev_href));
      $variables['prev_url'] = $prev_href;
      $variables['prev_title'] = check_plain($prev['title']);
    }

    if ($book_link['plid'] &&
        // Don't show link to level 0.
        $book_link['plid'] != $book_link['p1'] &&
        $parent = book_link_load($book_link['plid'])) {
      $parent_href = url($parent['href']);
      drupal_add_html_head_link(array('rel' => 'up', 'href' => $parent_href));
      $variables['parent_url'] = $parent_href;
      $variables['parent_title'] = check_plain($parent['title']);
    }

    if ($next = book_next($book_link)) {
      $next_href = url($next['href']);
      drupal_add_html_head_link(array('rel' => 'next', 'href' => $next_href));
      $variables['next_url'] = $next_href;
      $variables['next_title'] = check_plain($next['title']);
    }
  }

  $variables['has_links'] = FALSE;
  // Link variables to filter for values and set state of the flag variable.
  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');
  foreach ($links as $link) {
    if (isset($variables[$link])) {
      // Flag when there is a value.
      $variables['has_links'] = TRUE;
    }
    else {
      // Set empty to prevent notices.
      $variables[$link] = '';
    }
  }
}
