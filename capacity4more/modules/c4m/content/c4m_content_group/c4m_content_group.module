<?php
/**
 * @file
 * Code for the Group content type feature.
 */

include_once 'c4m_content_group.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_groups().
 *
 * @return array
 */
function c4m_content_group_c4m_og_vocab_info_groups() {
  return array(
    'group' => array(
      'c4m_vocab_category',
      'c4m_vocab_tag',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_content_group_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_block_info().
 */
function c4m_content_group_block_info() {
  $blocks['header_name_banner'] = array(
    'info' => t('Group header'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_group_block_view($delta = '') {
  module_load_include('inc', 'c4m_content_group', 'c4m_content_group.block');
  $callback = '_c4m_content_group_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Preprocess for blocks of this module.
 *
 * @param $variables
 */
function c4m_content_group_preprocess_block(&$variables) {
  module_load_include('inc', 'c4m_content_group', 'c4m_content_group.block');
  if ($variables['block']->module == 'c4m_content_group' &&
      !empty($variables['block']->delta)) {
    $callback = '_c4m_content_group_preprocess_' . $variables['block']->delta;
    if (function_exists($callback)) {
      $callback($variables);
    }
  }
}

/**
 * Implements hook_node_access(),
 *
 * Set right permissions for users to group nodes based on c4m_og_status field.
 */
function c4m_content_group_node_access($node, $op, $account) {
  if (!is_object($node) || $node->type != 'group') {
    return NODE_ACCESS_IGNORE;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $value = $wrapper->c4m_og_status->value();

  if (user_access('administer nodes', $account)) {
    // This is site administrator.
    return NODE_ACCESS_IGNORE;
  }

  if (!$account->uid) {
    // This is an anonymous user.
    if (in_array($value, array('requested', 'draft', 'rejected', 'deleted')) && $op == 'view') {
      // Anonymous user can't view groups that  are not public with
      // published or archived status.
      return NODE_ACCESS_DENY;
    }
  }

  if ($account->uid == $node->uid) {
    // Group owner.
    if ($value == 'deleted' && ($op == 'view' || $op == 'update')) {
      // Group owner can't view deleted groups.
      return NODE_ACCESS_DENY;
    }

    return NODE_ACCESS_ALLOW;
  }

  if (og_is_member('node', $node->nid, 'user', $account)) {

    if (!og_user_access('node', $node->nid, 'administer group', $account) && $op == 'update') {
      // not group administrator.
      return NODE_ACCESS_DENY;
    }

    if (in_array($value, array('requested', 'rejected', 'deleted')) && ($op == 'view' || $op == 'update')) {
      // Anonymous user can't view groups that  are not public with
      // published or archived status.
      return NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}
