<?php
/**
 * @file
 * Code for the Discussion content type feature.
 */

include_once 'c4m_content_discussion.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_content().
 *
 * @return array
 */
function c4m_content_discussion_c4m_og_vocab_info_content() {
  return array(
    'discussion' => array(
      'entity_type'  => 'node',
      'bundle'       => 'discussion',
      'vocabularies' => array(
        'c4m_vocab_category',
        'c4m_vocab_tag'
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function c4m_content_discussion_field_widget_info() {
  $widgets['c4m_add_document'] = array(
    'label' => t('C4M Document'),
    'description' => t('Load new document or select existing.'),
    'field types' => array('entityreference'),
    'settings' => array(
      'match_operator' => 'CONTAINS',
      'size' => 60,
      // We don't have a default here, because it's not the same between
      // the two widgets, and the Field API doesn't update default
      // settings when the widget changes.
      'path' => '',
    ),
  );

  return $widgets;
}
/**
 * Implements hook_field_widget_form().
 */
function c4m_content_discussion_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $entity_type = $instance['entity_type'];
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;

  if (!$entity) {
    return;
  }

  // Add the directive.
  $directive = theme('c4m_content_discussion_document_widget', array());
  $form['add_document'] = array(
    '#markup' => $directive,
    '#weight' => $instance['widget']['weight'],
  );

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );
  $settings['c4m'] = array(
    'basePath' => url('', $options),
  );
  drupal_add_js($settings, 'setting');

  // Add autocomplete widget, that will be hidden.
  $instance['widget']['type'] = 'entityreference_autocomplete';
  $instance['widget']['active'] = 1;

  $element['#weight'] = 0;
  $element = entityreference_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  return $element;
}

/**
 * Implements hook_theme().
 */
function c4m_content_discussion_theme() {
  $theme['c4m_content_discussion_document_widget'] = array(
    'template' => 'c4m_document_widget',
    'path' => drupal_get_path('module', 'c4m_content_discussion') . '/templates',
    'variables' => array(
      'vocabulary_name' => NULL,
    ),
  );

  $theme['c4m_content_discussion_add_document'] = array(
    'template' => 'c4m_content_discussion_add_document',
    'path' => drupal_get_path('module', 'c4m_content_discussion') . '/templates',
    'variables' => array(
      'file_id' => NULL,
    ),
  );

  return $theme;
}

/**
 * Implements hook_entity_type_label().
 */
function c4m_content_discussion_entity_type_label($variables) {
  if ($variables['entity_type'] !== 'node') {
    return;
  }

  $node = $variables['entity'];

  if ($node->type !== 'discussion') {
    return;
  }

  $object_wrapper = entity_metadata_wrapper('node', $node);
  $variables['return'] = $object_wrapper->c4m_discussion_type->value();

  return $variables;
}

function c4m_content_discussion_admin_paths() {
  $paths = array(
    'overlay/documents' => TRUE,
    'overlay/documents/table' => TRUE,
    'add_file/*' => TRUE,
  );
  return $paths;
}

function c4m_content_discussion_preprocess_page($vars) {
  if (strpos(current_path(), 'overlay') !== FALSE) {
    drupal_add_js(drupal_get_path('module', 'c4m_content_discussion') . '/js/document_overlay.js');
  }
}

/**
 * Implements hook_custom_theme().
 */
function c4m_content_discussion_custom_theme() {
  $item = menu_get_item();
  if (strpos($item['path'], 'overlay') !== FALSE) {
    return 'kapablo';
  }
}

/**
 * Implements hook_menu().
 */
function c4m_content_discussion_menu() {
  $items['add_file/%'] = array(
    'page callback' => 'c4m_content_discussion_add_document_file',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  return $items;
}

/**
 * Renders pre-create document form.
 *
 * @param $file_id
 *
 * @return string
 *  Return formatted html.
 */
function c4m_content_discussion_add_document_file($file_id) {
  $variables = array(
    'fileId' => $file_id,
  );

  return theme('c4m_content_discussion_add_document', $variables);
}
