<?php
/**
 * @file
 * Code for the Organisation content type feature.
 */

include_once 'c4m_content_organisation.features.inc';

/**
 * Implements hook_field_info().
 */
function c4m_content_organisation_field_info() {
  return array(
    'c4m_domain' => array(
      'label' => t('Domain'),
      'description' => t('Define the domain name and optional if it should be used to brand the users.'),
      'default_widget' => 'c4m_domain_field',
      'default_formatter' => 'c4m_domain_default',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function c4m_content_organisation_field_widget_info() {
  return array(
    'c4m_domain_field' => array(
      'label' => t('Text field'),
      'field types' => array('c4m_domain'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function c4m_content_organisation_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  // Add your global settings fields here
  $form = array();
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function c4m_content_organisation_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'c4m_domain_field' :
      $element['c4m_domain'] = array(
        '#type' => 'fieldset',
        '#title' => $element['#title'],
        '#tree' => TRUE,
      );
      $element['c4m_domain']['icon'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use icon'),
        '#default_value' => isset($items[$delta]['icon']) ? $items[$delta]['icon'] : '',
      );
      $element['c4m_domain']['domain'] = array(
        '#type' => 'textfield',
        '#title' => t('Domain'),
        '#default_value' => isset($items[$delta]['domain']) ? $items[$delta]['domain'] : '',
        '#required' => $element['#required'],
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_presave().
 */
function c4m_content_organisation_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['c4m_domain']['domain'])) {
      $items[$delta]['domain'] = $item['c4m_domain']['domain'];
      $items[$delta]['icon'] = $item['c4m_domain']['icon'];
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function c4m_content_organisation_field_is_empty($item, $field) {
  if (empty($item['c4m_domain']['domain'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_organisation_field_formatter_info() {
  return array(
    'c4m_domain_default' => array(
      'label' => t('Default'),
      'field types' => array('c4m_domain'),
    ),
    'c4m_domain_icon' => array(
      'label' => t('Domain and icon'),
      'field types' => array('c4m_domain'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_organisation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'c4m_domain_default' :
      foreach ($items as $delta => $item) {
        if (isset($item['domain'])) {
          $element[$delta]['#markup'] = $item['domain'];
        }
      }
      break;

    case 'c4m_domain_icon' :
      foreach ($items as $delta => $item) {
        if (isset($item['domain'])) {
          $element[$delta]['#markup'] = '';
          // Render the organisation icon when checkbox is checked.
          if ($item['icon'] && isset($entity->c4m_icon)) {
            $icons = field_get_items('node', $entity, 'c4m_icon');
            if (!empty($icons)) {
              $icon = field_view_value('node', $entity, 'c4m_icon', $icons[0], array(
                'type' => 'image',
                'settings' => array(
                  'image_style' => 'thumbnail',
                ),
              ));
            }
            $element[$delta]['#markup'] = render($icon);
          }
          $element[$delta]['#markup'] .= '<div class="c4m_domain">' . $item['domain'] . '</div>';
        }
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_ds_fields_info_alter().
 */
function c4m_content_organisation_ds_fields_info_alter(&$fields, $entity_type) {
  if (isset($fields['c4m_user_first_and_last_name']) &&
      $user_fullname = &$fields['c4m_user_first_and_last_name']) {
    $fields['c4m_user_first_and_last_name']['properties']['formatters']['user_with_icon'] = 'User first and last name with icon';
    $fields['c4m_user_first_and_last_name']['properties']['formatters']['linked_user_with_icon'] = 'User first and last name with icon linked to profile';
  }
}

/**
 * Get organisation icon,
 * where it matches the given domain.
 * @param $email
 * @return array
 */
function c4m_content_organisation_domain_icon($email) {
  $domain = explode('@', $email);
  if (isset($domain[1]) && $domain = $domain[1]) {
    $results = db_select('node', 'n');
    $results->join('field_data_field_c4m_domain', 'd', 'n.nid = d.entity_id');
    $results->fields('n', array('nid'));
    $results->condition('d.field_c4m_domain_domain', $domain, '=');
    $results->condition('d.field_c4m_domain_icon', 1, '=');

    $nid = $results->execute()->fetchField();
    if ($nid) {
      $organisation = node_load($nid);
      $icons = field_get_items('node', $organisation, 'c4m_icon');
      if (!empty($icons)) {
        $icon = field_view_value('node', $organisation, 'c4m_icon', $icons[0], array(
          'type' => 'image',
          'settings' => array(
            'image_style' => 'icon_small',
          ),
        ));

        return $icon;
      }
    }
  }
}
