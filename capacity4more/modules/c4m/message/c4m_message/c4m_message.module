<?php
/**
 * @file
 * Code for the Message feature.
 */

include_once 'c4m_message.features.inc';

/**
 * Implements hook_entity_insert().
 *
 * Delegate message creation for inserted entities.
 */
function c4m_message_entity_insert($entity, $entity_type) {
  c4m_message_crud_message($entity_type, $entity, 'insert');
}

/**
 * Implements hook_entity_update().
 *
 * Delegate message creation for inserted entities.
 */
function c4m_message_entity_update($entity, $entity_type) {
  c4m_message_crud_message($entity_type, $entity, 'update');
}

/**
 * Implements hook_entity_delete().
 *
 * @todo: Push item to queue.
 */
function c4m_message_entity_delete($entity, $entity_type) {
  $valid_entity_types = array(
    'comment',
    'node',
    'taxonomy_term',
    'og_membership',
  );

  if (!in_array($entity_type, $valid_entity_types)) {
    // Not an entity related to message.
    return;
  }

}


/**
 * Implements hook_entity_load().
 *
 * Add callbacks to the arguments. Instead of hardcoding them, we add those
 * arguments on the fly.
 */
function c4m_message_entity_load($entities, $entity_type) {
  if ($entity_type != 'message') {
    return;
  }

  foreach ($entities as $entity) {

    list(,, $bundle) = entity_extract_ids($entity_type, $entity);
    $func = 'c4m_message_load__' . $bundle;

    if (function_exists($func)) {
      // Call the delegated load function.
      $func($entity);
    }
  }
}

/**
 * Delegate message CRUD to message type specific functions.
 *
 * @param $entity_type
 *   The entity type.
 * @param $entity
 *   The entity object.
 * @param $op
 *   The operation to perform. Possible values are "insert" or "update"
 *
 * @return Message
 *   The saved message object, or NULL if not created or updated.
 */
function c4m_message_crud_message($entity_type, $entity, $op) {
  if (!empty($entity->_skip_message)) {
    // Entity should not create a message.
    return;
  }

  $valid_entity_types = array(
    'comment',
    'node',
    'taxonomy_term',
    'og_membership',
  );

  if (!in_array($entity_type, $valid_entity_types)) {
    // Not an entity related to message.
    return;
  }

  $message = NULL;

  $func = 'c4m_message__' . $op . '__' . $entity_type;
  list(,, $bundle) = entity_extract_ids($entity_type, $entity);
  $bundle_func = $func . '__' . $bundle;

  if (function_exists($bundle_func)) {
    // Call the bundle specific function.
    $message = $bundle_func($entity);
  }
  elseif (function_exists($func)) {
    // Call the entity specific function.
    $message = $func($entity);
  }

  if ($message) {
    $message->save();
  }

  return $message;
}

/**
 * A gerenal function to add arguments for node related messges.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load_general_arguments(Message $message) {
  $message->arguments['@date'] = array(
    'callback' => 'c4m_message_format_date_for_message',
    'pass message' => TRUE,
  );
}

/**
 * Replace the date value of a message with a formatted value.
 *
 * @todo: Change value according to spec to use format_interval() when needed.
 *
 * @param Message $message
 *   The Message entity.
 * @return string
 *   The formatted date.
 */
function c4m_message_format_date_for_message(Message $message) {
  return format_date($message->timestamp);
}


/**
 * Delegated hook_entity_load() for node of "discussion" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__discussion(Message $message) {
  c4m_message_load_general_arguments($message);
  $message->arguments['@type'] = array(
    'callback' => 'c4m_message_node_discussion_type',
    'pass message' => TRUE,
  );
}

/**
 * Return the formatted discussion type.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_node_discussion_type(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $discussion_type = $wrapper->field_node->c4m_discussion_type->value();

  switch ($discussion_type) {
    case 'info':
      return t('posted Information');

    case 'idea':
      return t('posted an Idea');

    case 'question':
      return t('Asked a Question');

    case 'debate':
      return t('started a Debate');
  }
}

/**
 * Create a discussion message.
 *
 * @param $node
 *   The discussion node object.
 *
 * @return Message
 *   The non-saved message entity.
 */
function c4m_message__insert__node__discussion($node) {
  $values = array('uid' => $node->uid);
  $message = message_create('c4m_insert__node__discussion', $values);

  $message_wrapper = entity_metadata_wrapper('message', $message);
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // @todo: There should be only a single group attached to a content, so we
  // need to change OG_AUDIENCE_FIELD to cardinality 1.
  $group_ids = $node_wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE));
  $group_id = reset($group_ids);
  $message_wrapper->field_group_node->set($group_id);
  $message_wrapper->field_node->set($node);

  return $message;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add "Activity stream" view mode.
 */
function c4m_message_entity_info_alter(&$entity_info) {
  $entity_info['message']['view modes']['activity_stream'] = array(
    'label' => t('Activity stream'),
    'custom settings' => TRUE,
  );
}

/**
 * Activity stream messages preprocess.
 */
function c4m_message_preprocess_message(&$variables) {
  $message = $variables['message'];

  $variables['theme_hook_suggestions'][] = "message__{$message->type}__activity_stream";

  $preprocess_function = "c4m_message_preprocess_message__{$message->type}__activity_stream";


  if (function_exists($preprocess_function)) {
    $preprocess_function($variables);
  }
}

/**
 * Activity stream messages preprocess.
 */
function c4m_message_preprocess_message__c4m_insert__node__discussion__activity_stream(&$variables) {
  $message = $variables['message'];
  $variables['message'] = $message->getText();
}

