<?php
/**
 * @file
 * Code for the People overview feature.
 */

include_once 'c4m_features_og_members.features.inc';

define('C4M_ADMINISTRATOR_ROLE_NAME', 'administrator member');

/**
 * Implements hook_menu().
 */
function c4m_features_og_members_menu() {
  $items['members/promote/%user'] = array(
    'title' => 'Promote to group administrator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_promote', 2),
    'access callback' => 'c4m_features_og_members_access_group',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/demote/%user'] = array(
    'title' => 'Demote to normal group member',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_demote', 2),
    'access callback' => 'c4m_features_og_members_access_group',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/remove/%user'] = array(
    'title' => 'Remove from group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_remove', 2),
    'access callback' => 'c4m_features_og_members_access_group',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/approve/%user'] = array(
    'title' => 'Approve membership request',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_approve', 2),
    'access callback' => 'c4m_features_og_members_access_group',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/reject/%user'] = array(
    'title' => 'Reject membership request',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_reject', 2),
    'access callback' => 'c4m_features_og_members_access_group',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );

  return $items;
}

/**
 * Menu access; Check if there is a group context and user has permission to it.
 *
 * @param      $perm
 */
function c4m_features_og_members_access_group($perm) {
  $group = c4m_og_current_group();

  if (!$group) {
    return FALSE;
  }

  // Re-use built-in og user access checks.
  return og_ui_user_access_group($perm, 'node', $group->nid);
}

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_features_og_members_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_features_og_members');
  // Administrator links field for entity type user (, within a group)
  $fields['user']['c4m_features_og_members_admin_actions'] = array(
    'title' => t('OG administer user links'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_features_og_members.theme.inc',
    'function' => 'theme_c4m_features_og_members_admin_actions',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  return $fields;
}

/**
 * Implements hook_theme().
 */
function c4m_features_og_members_theme() {
  $theme['c4m_administer_member_links'] = array(
    'template' => 'c4m_administer_member_links',
    'path' => drupal_get_path('module', 'c4m_features_og_members') . '/templates',
    'variables' => array(
      'links' => array(),
      'membership_level' => NULL,
      'user_id' => 0,
    ),
  );
  $theme['c4m_administer_member_level'] = array(
    'template' => 'c4m_administer_member_level',
    'path' => drupal_get_path('module', 'c4m_features_og_members') . '/templates',
    'variables' => array(
      'links' => array(),
      'membership_level' => NULL,
      'user_id' => 0,
    ),
  );
  return $theme;
}


/**
 * Load and cache all actionable links to administer users in a group.
 *
 * @param object $user
 *   Drupal user entity object.
 * @param object $group
 *   Drupal group entity object.
 *
 * @return array
 *   Configuration as collected trough the implemented
 *   hook_c4m_features_og_members_administer_links hooks.
 */
function c4m_features_og_members_get_administer_links($user, $group) {
  $cache_key = 'c4m_features_og_members:administer_links';
  $info = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($info)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $info = $cache->data;
    }
    else {
      $hook = 'c4m_features_og_members_administer_links';
      $info = module_invoke_all($hook);
      cache_set($cache_key, $info);
    }
  }

  return $info;
}


/**
 * Implements hook_c4m_features_og_members_administer_links().
 *
 * @return array
 */
function c4m_features_og_members_c4m_features_og_members_administer_links() {
  return array(
    'promote' => array(
      'callback' => 'members/promote/[user_uid]',
      'title' => t('Promote to [group_type] Administrator'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_active_member',
        '_c4m_features_og_members_condition_user_not_admin',
        '_c4m_features_og_members_condition_user_not_owner',
      ),
      'weight' => -8,
      'class' => array(
        'bold-text'
      ),
    ),
    'demote' => array(
      'callback' => 'members/demote/[user_uid]',
      'title' => t('Demote to normal [group_type] Member'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_active_member',
        '_c4m_features_og_members_condition_user_admin',
        '_c4m_features_og_members_condition_user_not_owner',
        ),
      'weight' => -7,
      'class' => array(
        'bold-text'
      ),
    ),
    'remove' => array(
      'callback' => 'members/remove/[user_uid]',
      'title' => t('Remove from [group_type]'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_active_member',
        '_c4m_features_og_members_condition_user_not_owner',
      ),
      'weight' => 10,
    ),
    'approve' => array(
      'callback' => 'members/approve/[user_uid]',
      'title' => t('Approve Membership request'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_pending_member',
      ),
      'weight' => -10,
      'class' => array(
        'bold-text'
      ),
    ),
    'reject' => array(
      'callback' => 'members/reject/[user_uid]',
      'title' => t('Reject Membership request'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_pending_member',
      ),
      'weight' => -9,
    ),
  );
}

/**
 *  Condition callback. Is user active member of the group?
 *
 * @param $account
 * @param $group
 *
 * @return bool
 */
function _c4m_features_og_members_condition_user_active_member($account, $group) {
  $membership = og_get_membership('node', $group->nid, 'user', $account->uid);
  if (!$membership) {
    return FALSE;
  }
  if ($membership->state == OG_STATE_ACTIVE) {
    return TRUE;
  }
  return FALSE;
}

/**
 *  Condition callback. Is user blocked from the group?
 *
 * @param $account
 * @param $group
 *
 * @return bool
 */
function _c4m_features_og_members_condition_user_blocked_member($account, $group) {
  $membership = og_get_membership('node', $group->nid, 'user', $account->uid);
  if (!$membership) {
    return FALSE;
  }
  if ($membership->state == OG_STATE_BLOCKED) {
    return TRUE;
  }
  return FALSE;
}

/**
 *  Condition callback. Is user pending member of the group?
 *
 * @param $account
 * @param $group
 *
 * @return bool
 */
function _c4m_features_og_members_condition_user_pending_member($account, $group) {
  $membership = og_get_membership('node', $group->nid, 'user', $account->uid);
  if (!$membership) {
    return FALSE;
  }
  if ($membership->state == OG_STATE_PENDING) {
    return TRUE;
  }
  return FALSE;
}

/**
 *  Condition callback. Is user NOT an admin already?
 *
 * @param $account
 * @param $group
 *
 * @return bool
 */
function _c4m_features_og_members_condition_user_not_admin($account, $group) {
  return !_c4m_features_og_members_condition_user_admin($account, $group);
}

/**
 *  Condition callback. Is user administrative member of the group?
 *
 * @param $account
 * @param $group
 *
 * @return bool
 */
function _c4m_features_og_members_condition_user_admin($account, $group) {
  $admin_role = _c4m_features_og_members_get_admin_role($group);

  if (!$admin_role) {
    return FALSE;
  }

  $user_roles = og_get_user_roles('node', $group->nid, $account->uid);

  if (array_search(C4M_ADMINISTRATOR_ROLE_NAME, $user_roles)) {
    return TRUE;
  }

  return FALSE;
}

/**
 *  Condition callback. Is user the owner of the group?
 *
 * @param $account
 * @param $group
 *
 * @return bool
 */
function _c4m_features_og_members_condition_user_owner($account, $group) {
  return $account->uid == $group->uid;
}

/**
 *  Condition callback. Is user NOT the owner of the group?
 *
 * @param $account
 * @param $group
 *
 * @return bool
 */
function _c4m_features_og_members_condition_user_not_owner($account, $group) {
  return !_c4m_features_og_members_condition_user_owner($account, $group);
}


/**
 * usort callback for weighted multidimensional arrays. Sorts Ascending (- to +).
 *
 * @param array $a
 * @param array $b
 */
function _c4m_features_og_members_sort_weight($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }

  return ($a['weight'] > $b['weight']) ? 1 : -1;
}

function _c4m_features_og_members_get_admin_role($group) {
  $cache_key = 'c4m_features_og_members:admin_role';
  $info = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($info)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $info = $cache->data;
    }
    else {
      $roles = og_roles('node', $group->type, $group->nid);
      $info = array_search(C4M_ADMINISTRATOR_ROLE_NAME, $roles);
      cache_set($cache_key, $info);
    }
  }

  return $info;
}