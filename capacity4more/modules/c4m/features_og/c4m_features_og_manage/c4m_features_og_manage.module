<?php
/**
 * @file
 * Code for the Group Management feature.
 */

include_once 'c4m_features_og_manage.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_features_og_manage_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu().
 */
function c4m_features_og_manage_menu() {
  $items = array();

  $items['manage/features'] = array(
    'title' => 'Manage features',
    'description' => 'Enable or disable group features.',
    'page callback' => 'c4m_features_og_manage_features',
    'file' => 'includes/c4m_features_og_manage_features.inc',
    'access callback' => array('c4m_features_og_manage_features_access'),
    'type' => MENU_CALLBACK,
  );

  $items['manage/categories'] = array(
    'title' => 'Manage categories',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_manage_categories_overview_form'),
    'access callback' => array('c4m_features_og_manage_categories_access'),
    'file' => 'c4m_manage_categories.inc',
  );

  $items['manage/categories/types'] = array(
    'title' => 'Manage categories types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_manage_categories_types_overview_form'),
    'access callback' => array('c4m_features_og_manage_categories_access'),
    'file' => 'c4m_manage_categories.inc',
  );

  $items['manage/categories/term/%/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_manage_categories_term_form', 3),
    'access callback' => array('c4m_features_og_manage_categories_access'),
    'file' => 'c4m_manage_categories.inc',
  );

  $items['manage/categories/type/%/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_manage_categories_type_form', 3),
    'access callback' => array('c4m_features_og_manage_categories_access'),
    'file' => 'c4m_manage_categories.inc',
  );

  return $items;
}

/**
 * Access callback for manage group categories.
 */
function c4m_features_og_manage_categories_access() {
  // Check if in a group.
  $gid = c4m_og_current_group_id();
  if (empty($gid)) {
    return FALSE;
  }
  return og_user_access('node', $gid, 'administer group');
}

/**
 * Access callback for manage features menu.
 */
function c4m_features_og_manage_features_access() {
  // Check if in a group.
  $gid = c4m_og_current_group_id();
  if (empty($gid)) {
    return FALSE;
  }
  // Check if user has permission to manage group settings.
  return og_ui_user_access_group('manage variables', 'node', $gid);
}

/**
 * Implements hook_theme().
 */
function c4m_features_og_manage_theme() {
  return array(
    'c4m_features_og_manage_categories_overview_form' => array(
      'render element' => 'form',
    ),
    'c4m_features_og_manage_categories_types_overview_form' => array(
      'render element' => 'form',
    ),
    'c4m_features_og_manage_categories_term_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * @TODO: Add docs.
 *
 * @param $form
 * @return mixed
 */
function c4m_feature_og_manage_get_form_info($form) {
  $group = c4m_og_current_group();
  $vocabulary = c4m_og_vocab_load_group_vocabulary($group, 'c4m_vocab_category');

  $form['#vocabulary'] = $vocabulary;
  $form['#group'] = $group;
  $form['#tree'] = TRUE;
  $form['#parent_fields'] = FALSE;

  return $form;
}

/**
 * @TODO: Add docs.
 *
 * @param $form
 * @param $tree
 * @param $items_type
 * @return mixed
 */
function c4m_features_og_manage_build_form($form, $tree, $items_type) {
  $delta = 0;
  $term_deltas = array();
  $term = current($tree);
  do {
    // In case this tree is completely empty.
    if (empty($term)) {
      break;
    }
    $delta++;

    // Finally, if we've gotten down this far, we're rendering a term on this page.
    $term_deltas[$term->tid] = isset($term_deltas[$term->tid]) ? $term_deltas[$term->tid] + 1 : 0;
    $key = 'tid:' . $term->tid . ':' . $term_deltas[$term->tid];

    $form['#first_tid'] = $term->tid;
    $current_page[$key] = $term;
  } while ($term = next($tree));

  // If this form was already submitted once, it's probably hit a validation
  // error. Ensure the form is rebuilt in the same order as the user submitted.
  if (!empty($form_state['input'])) {
    $order = array_flip(array_keys($form_state['input'])); // Get the $_POST order.
    $current_page = array_merge($order, $current_page); // Update our form with the new order.
    foreach ($current_page as $key => $term) {
      // Verify this is a term for the current page and set at the current depth.
      if (is_array($form_state['input'][$key]) && is_numeric($form_state['input'][$key]['tid'])) {
        $current_page[$key]->depth = $form_state['input'][$key]['depth'];
      }
      else {
        unset($current_page[$key]);
      }
    }
  }

  // Build the actual form.
  foreach ($current_page as $key => $term) {
    // Save the term for the current page so we don't have to load it a second time.
    $form[$key]['#term'] = (array) $term;
    if (isset($term->parents)) {
      $form[$key]['#term']['parent'] = $term->parent = $term->parents[0];
      unset($form[$key]['#term']['parents'], $term->parents);
    }

    $form[$key]['view'] = array('#type' => 'link', '#title' => $term->name, '#href' => "taxonomy/term/$term->tid");
    if ($form['#vocabulary']->hierarchy < 2 && count($tree) > 1) {
      $form['#parent_fields'] = TRUE;
      $form[$key]['tid'] = array(
        '#type' => 'hidden',
        '#value' => $term->tid
      );
      $form[$key]['parent'] = array(
        '#type' => 'hidden',
        // Yes, default_value on a hidden. It needs to be changeable by the javascript.
        '#default_value' => $term->parent,
      );
      $form[$key]['depth'] = array(
        '#type' => 'hidden',
        // Same as above, the depth is modified by javascript, so it's a default_value.
        '#default_value' => $term->depth,
      );
    }
    $path = $items_type == 'types' ? 'types' : '';
    $edit_path = $items_type == 'types' ? 'type' : 'term';
    $form[$key]['edit'] = array('#type' => 'link', '#title' => t('Edit'), '#href' => 'manage/categories/' . $edit_path . '/' . $term->tid . '/edit', '#options' => array('query' => drupal_get_destination()));
    $form[$key]['delete'] = array('#type' => 'link', '#title' => t('Delete'), '#href' => 'manage/categories/' . $path, '#options' => array('query' => array('delete' => $term->tid)));
    // Adding "Add a term" form under each category type.
    if ($term->parent == 0 && $items_type == 'terms') {
      $form[$key]['add_term_form']['name'] = array(
        '#title' => t('Term name'),
        '#title_display' => 'invisible',
        '#type' => 'textfield',
        '#name' => 'name-' . $term->tid,
        '#attributes' => array(
          'class' => array('label-input'),
        ),
      );

      $form[$key]['add_term_form']['actions']['add_term'] = array(
        '#type' => 'submit',
        '#value' => t('Add Term'),
        '#name' => 'add-term-' . $term->tid,
        '#attributes' => array(
          'id' => $term->tid,
        ),
      );
    }
  }

  $form['#empty_text'] = t('No terms available.');

  if ($form['#vocabulary']->hierarchy < 2 && count($tree) > 1) {
    $form['actions'] = array('#type' => 'actions', '#tree' => FALSE);
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save')
    );
    $form_state['redirect'] = array($_GET['q'], (isset($_GET['page']) ? array('query' => array('page' => $_GET['page'])) : array()));
  }

  if ($items_type == 'terms') {
    $form['actions']['new_category'] = array(
      '#type' => 'link',
      '#title' => t('Add new type of category'),
      '#href' => 'manage/categories/types',
      '#attributes' => array(
        'class' => array(
          'btn btn-default',
        ),
      ),
    );
  }

  return $form;
}

/**
 * Gets the group details.
 *
 * For the group management dashboard,
 * this function gets a specific information about the current group.
 *
 *
 * @return array|bool
 *  An array of the current group's info OR false if there's no group in current context.
 */
function c4m_features_og_manage_group_details() {
  $group = c4m_og_current_group();
  if (!$group) {
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper('node', $group);

  // Info about the membership request field.
  $membership_field = field_info_field('field_membership_open_request');

  $details = array(
    'edit_link' => url('node/' . $group->nid . '/edit', array('absolute' => TRUE)),
    'purl' => url($wrapper->value()->purl, array('absolute' => TRUE)),
    'title' => '<strong>' . $wrapper->label() . '</strong>',
    'description' => $wrapper->c4m_body->value(),
    'membership_open_request' => $membership_field['settings']['allowed_values'][$wrapper->field_membership_open_request->value()],
    'group_access' => c4m_og_get_access_type($group),
    'topics' => t('No Group Topics'),
    'locations' => t('No Group Regions & Countries'),
    'related_groups' => t('No Related Groups'),
    'related_projects' => t('No Related Projects'),
  );

  // List of related topics.
  if ($topics = $wrapper->c4m_related_topic->value()) {
    $topic_list = array(
      'title' => NULL,
      'type' => 'ul',
      'items' => array(),
      'attributes' => array(),
    );
    foreach ($topics as $topic) {
      $options = array(
        'purl' => array(
          'disabled' => TRUE,
        ),
        'absolute' => TRUE,
        'query' => array(
          'f[0]' => 'c4m_related_topic:' . $topic->nid,
        )
      );
      $topic_list['items'][] = l($topic->title, url('search' , $options));
    }

    $details['topics'] = theme_item_list($topic_list);
  }

  // List of regions & countries.
  if ($geo = $wrapper->c4m_vocab_geo->value()) {
    $geo_list = array(
      'title' => NULL,
      'type' => 'ul',
      'items' => array(),
      'attributes' => array(),
    );
    foreach ($geo as $location) {
      $options = array(
        'purl' => array(
          'disabled' => TRUE,
        ),
        'absolute' => TRUE,
        'query' => array(
          'f[0]' => 'c4m_vocab_geo:' . $location->tid,
        )
      );
      $geo_list['items'][] = l($location->name, url('search', $options));
    }

    $details['locations'] = theme_item_list($geo_list);
  }

  // List of related groups.
  if ($related_groups = $wrapper->c4m_related_group->value()) {
    $related_groups_list = array(
      'title' => NULL,
      'type' => 'ul',
      'items' => array(),
      'attributes' => array(),
    );

    $url_options = array(
      'purl' => array(
        'disabled' => TRUE,
      ),
      'absolute' => TRUE
    );

    foreach ($related_groups as $related_group) {
      $access_type = c4m_og_get_access_type($related_group);
      $link_options = array(
        'attributes' => array(
          'class' => array(
            'access-title',
            $access_type['type'],
          ),
        ),
      );
      $related_groups_list['items'][] = l($related_group->title, url($related_group->purl, $url_options), $link_options);
    }

    $details['related_groups'] = theme_item_list($related_groups_list);
  }

  // List of related projects.
  if ($related_projects = $wrapper->c4m_related_projects->value()) {
    $related_projects_list = array(
      'title' => NULL,
      'type' => 'ul',
      'items' => array(),
      'attributes' => array(),
    );

    $url_options = array(
      'purl' => array(
        'disabled' => TRUE,
      ),
      'absolute' => TRUE
    );

    foreach ($related_projects as $related_project) {
      $access_type = c4m_og_get_access_type($related_project);
      $link_options = array(
        'attributes' => array(
          'class' => array(
            'access-title',
            $access_type['type'],
          ),
        ),
      );
      $related_projects_list['items'][] = l($related_project->title, url($related_project->purl, $url_options), $link_options);
    }

    $details['related_projects'] = theme_item_list($related_projects_list);
  }
  
  // Get categories and terms count for current group.
  $og_vocab = c4m_restful_get_og_vocab_by_name('node', $group->nid, 'Categories');
  $details['taxonomy_manage_link'] = l(t('Edit'), url('manage/categories', array('absolute' => TRUE)));
  $categories = taxonomy_get_tree($og_vocab[0]->vid);
  $categories_count = 0;
  $terms_count = 0;
  foreach ($categories as $category) {
    if ($category->parents[0]) {
      $terms_count++;
    }
    else {
      $categories_count++;
    }
  }
  $details['categories_count'] = $categories_count;
  $details['terms_count'] = $terms_count;

  // Get features settings.
  $details['features_available'] = c4m_og_feature_info();
  $details['features_manage_link'] = l(t('Edit'), url('manage/features', array('absolute' => TRUE)));
  $details['features_enabled'] = variable_get('c4m_og_features_group', array());

  return $details;
}

/**
 * Gets the group status and thumbnail.
 *
 * For the group management dashboard,
 * This function gets the current status of the group,
 * An archive link (If the group is not archived),
 * The number of the group membership requests which links to the "members" page (Filtered by pending)
 * and a thumbnail image of the group with an edit link.
 *
 * @return array|bool
 *  An array of current group's status and thumbnail image OR false if there's no group in current context.
 */
function c4m_features_og_manage_group_status_and_thumbnail() {
  $group = c4m_og_current_group();
  if (!$group) {
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper('node', $group);

  // Pending memberships count link.
  $pending_memberships_count_text = t('@count Group membership requests', array(
      '@count' => c4m_og_get_members_count($group, OG_STATE_PENDING),
    )
  );
  $link_options = array(
    'absolute' => TRUE,
    'query' => array(
      'f[0]' => 'c4m_og_membership_type:' . $group->nid .'_pending',
    ),
  );
  $info = array(
    'status' => $wrapper->c4m_og_status->value(),
    'pending_members_link' => l($pending_memberships_count_text, url('members', $link_options)),
  );

  // Group thumbnail image with edit link.
  $file = $wrapper->c4m_media->value();
  if (!empty($file)) {
    $options = array(
      'html' => TRUE,
      'attributes' => array(
        'class' => array(
          'edit-thumbnail',
        ),
      ),
    );
    $edit_link['element'] = array(
      '#tag' => 'span',
      '#attributes' => array(
        'class' => array('edit-link'),
      ),
      '#value' => t('Edit'),
    );
    $file['style_name'] = 'medium';
    $file['path'] = $file['uri'];
    $file['attributes'] = array('class' => 'group-thumbnail');
    $info['thumbnail_image'] = l(theme_image_style($file) . theme_html_tag($edit_link), url('node/' . $group->nid . '/edit', array('absolute' => TRUE, 'fragment' => 'edit-image-list')), $options);
  }

  // Archive group link (If group is not archived already).
  $info['archive_link'] = $info['status'] != 'archived' ? l(t('Archive group'), url('node/' . $group->nid . '/edit', array('absolute' => TRUE))) : '';

  return $info;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter variable manage form layout.
 */
function c4m_features_og_manage_form_variable_realm_edit_variables_form_alter(&$form, &$form_state, $form_id) {
  // Don't use vertical tabs.
  $form['variables']['#type'] = 'div';
  $form['variables']['c4m_og']['#type'] = 'div';
  $form['variables']['c4m_og']['c4m_og_features_[group_type]']['c4m_og_features_group']['#title'] = t('Enable or disable features for this group.');
  $form['variables']['c4m_og']['c4m_og_features_[group_type]']['#type'] = 'div';
  $form['variables']['c4m_og']['c4m_og_features_[group_type]']['#collapsible'] = FALSE;
  $form['variables']['c4m_og']['c4m_og_features_[group_type]']['#collapsed'] = FALSE;

  // Attach CSS/JavaScript.
  $form['variables']['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'c4m_features_og_manage') . '/js/manage_features.js',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add anchors to the following elements by adding an ID on their elements.
 */
function c4m_features_og_manage_form_group_node_form_alter(&$form, &$form_state) {
  $form_elements = array(
    'title' => 'edit-details',
    'c4m_related_group' => 'edit-related-content',
    'c4m_banner' => 'edit-image-banner',
    'c4m_media' => 'edit-image-list',
  );
  foreach($form_elements as $element => $id) {
    $form[$element]['#prefix'] = "<div id='$id'>";
    $form[$element]['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevent access to the "description" and "relations" fields for non platform-administrators.
 */
function c4m_features_og_manage_form_taxonomy_form_term_alter(&$form, &$form_state) {
  global $user;
  if (!in_array('administrator', $user->roles)) {
    $form['description']['#access'] = FALSE;
    $form['relations']['#access'] = FALSE;
  }
}
