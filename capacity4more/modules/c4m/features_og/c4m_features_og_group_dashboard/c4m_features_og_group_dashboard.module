<?php
/**
 * @file
 * Code for the Group Dashboard feature.
 */

include_once 'c4m_features_og_group_dashboard.features.inc';


/**
 * Implements hook_action_info()
 * @return mixed
 */
function c4m_features_og_group_dashboard_action_info() {
  $info['c4m_unflag_nodes_action'] = array(
    'type' => 'node',
    'label' => t('Unflag all nodes belonging to a group'),
    'configurable' => FALSE,
    'triggers' => array(),
  );

  return $info;
}

/**
 * Action to remove flagged group content
 * @param $object
 * @param array $context
 */
function c4m_unflag_nodes_action(&$object, $context = array()) {
  if (isset($object->nid) && isset($context['flag'])) {
    $group_id   = c4m_og_get_gid_from_entity($object);
    $flag_id    = $context['flag']->fid;
    $flag_name  = $context['flag']->name;
    $nid = $object->nid;

    $flagged_og_content = c4m_features_og_group_dashboard_get_flagged_group_content($group_id, $flag_id);

    if (!empty($flagged_og_content)) {
      //Remove the newly flagged node from the flagged content
      //because this one shouldn't be unflagged
      unset($flagged_og_content[$nid]);

      //Unflag all group content
      foreach($flagged_og_content as $row) {
        flag('unflag', $flag_name, $row->nid);
      }
    }
  }
}

/**
 * Function to get flagged group content
 * @param $og_id
 * @param $flag_id
 * @return array|null
 */
function c4m_features_og_group_dashboard_get_flagged_group_content($og_id, $flag_id) {
  $flagged_content = array();

  if(is_int($og_id)) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->join('og_membership', 'og', 'n.nid = og.etid');
    $query->join('flagging', 'f', 'n.nid = f.entity_id');
    $query->condition('og.gid', $og_id, '=');
    $query->condition('f.fid', $flag_id, '=');
    $flagged_content = $query->execute();
    $flagged_content = $flagged_content->fetchAllAssoc('nid');
  }

  return $flagged_content;
}