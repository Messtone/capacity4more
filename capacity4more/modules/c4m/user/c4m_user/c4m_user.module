<?php

include_once 'c4m_user.features.inc';

/**
 * Expose default view modes.
 *
 * This hook is called by CTools. For this hook to work, you need
 * hook_ctools_plugin_api(). The values of this hook can be overridden
 * and reverted through the UI.
 */
function c4m_user_ds_view_modes_info() {
  $ds_view_modes = array();

  $ds_view_mode                   = new stdClass;
  $ds_view_mode->disabled         = FALSE; /* Edit this to true to make a default ds_view_mode disabled initially */
  $ds_view_mode->api_version      = 1;
  $ds_view_mode->view_mode        = 'c4m_user_picture';
  $ds_view_mode->label            = 'User picture only';
  $ds_view_mode->entities         = array(
    'user' => 'user',
  );
  $ds_view_modes['c4m_user_picture'] = $ds_view_mode;


  $ds_view_mode                   = new stdClass;
  $ds_view_mode->disabled         = FALSE; /* Edit this to true to make a default ds_view_mode disabled initially */
  $ds_view_mode->api_version      = 1;
  $ds_view_mode->view_mode        = 'c4m_user_teaser_list';
  $ds_view_mode->label            = 'User teaser list';
  $ds_view_mode->entities         = array(
    'user' => 'user',
  );
  $ds_view_modes['c4m_user_teaser_list'] = $ds_view_mode;

  $ds_view_mode                   = new stdClass;
  $ds_view_mode->disabled         = FALSE; /* Edit this to true to make a default ds_view_mode disabled initially */
  $ds_view_mode->api_version      = 1;
  $ds_view_mode->view_mode        = 'c4m_user_teaser_table';
  $ds_view_mode->label            = 'User teaser table';
  $ds_view_mode->entities         = array(
    'user' => 'user',
  );
  $ds_view_modes['c4m_user_teaser_table'] = $ds_view_mode;

  return $ds_view_modes;
}

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_user_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_user');
  $image_styles = array();
  foreach (image_styles() as $image_style_id => $image_style) {
    $image_styles[$image_style_id] = $image_style['label'];
    $image_styles['linked_' . $image_style_id] = $image_style['label'] . ' ' .
      t('linked to profile');
  }
  // Fields for entity type user
  $fields['user']['c4m_user_picture'] = array(
    'title'      => t('User picture'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_user.theme.inc',
    'function'   => 'theme_c4m_user_picture',
    'properties' => array('formatters' => $image_styles),
  );

  // Fields for entity type user (, within a group)
  $fields['user']['c4m_user_og_membership_type'] = array(
    'title'      => t('OG user membership type'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_user.theme.inc',
    'function'   => 'theme_c4m_user_og_membership_type',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  return $fields;
}

/**
 * Helper function to render C4M user image based on a user entity.
 *
 * @param $user
 *
 * @return string
 */
function c4m_user_image($user, $style = NULL) {
  $output  = '';
  $wrapper = entity_metadata_wrapper('user', $user);
  $file    = $wrapper->c4m_media->value();
  if (!empty($file)) {
    $file['style_name'] = empty($style) ? 'media_thumbnail' : $style;
    $file['path']       = $file['uri'];
    $file['attributes'] = array('class' => 'user-image');
    $img                = theme_image_style($file);
    $output             = l($img, 'user/' . $user->uid, array('html' => 'TRUE'));
  }

  return $output;
}

/**
 * Return the themed initials (max 2) of a user's full name.
 *
 * @param $account
 *
 * @return string
 */
function c4m_user_initials_themed($account, $linked = TRUE) {
  $initials = c4m_user_initials($account);
  static $colors;

  if (empty($colors)) {
    $colors = _c4m_user_initials_colors();
  }

  if ($linked) {
    $output = l($initials, 'user/' . $account->uid);
  }
  else {
    $output = $initials;
  }

  $tag = array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array(
        'class' => array(
          'no-avatar',
          'initials',
          'bg-' . $colors[mt_rand(0, count($colors) - 1)]
        ),
      ),
      '#value' => $output,
    ),
  );

  return theme_html_tag($tag);
}

/**
 * Return the initials (max 2) of a user's full name.
 *
 * @param $account
 *
 * @return string
 */
function c4m_user_initials($account) {
  $name = c4m_user_name($account);
  $words = preg_split("/[\s,_-]+/", $name);
  $initials = '';

  foreach ($words as $w) {
    $initials .= $w[0];
  }

  return substr($initials, 0, 2);
}

/**
 * Helper function to render user first and last name in one string using the
 * user entity.
 *
 * @param $user
 *
 * @return string
 */
function c4m_user_name($user) {
  $wrapper = entity_metadata_wrapper('user', $user);

  if ($user->uid == 0) {
    return t('Anonymous');
  }

  $fullname = trim($wrapper->c4m_first_name->value()) . ' '
    . trim($wrapper->c4m_last_name->value());

  if (!trim($fullname)) {
    $fullname = $user->name;
  }

  return trim($fullname);
}

/**
 * Get some background classes (random colors).
 *
 * @return array
 */
function _c4m_user_initials_colors() {
  return array(
    'dark-navy',
    'pastel-pink',
    'beige',
    'brown',
    'brown-light',
    'blue',
    'salmon',
    'pastel-orange',
    'green',
    'green-light',
    'pink-dark',
  );
}
